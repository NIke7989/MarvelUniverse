pipeline {
    agent any

    tools {
        maven 'Maven'  // Ensure Maven is installed in Jenkins
        jdk 'JDK17'    // Use JDK 17
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/NIke7989/MarvelUniverse.git'
            }
        }

        stage('Build with Maven') {
            steps {
                dir('MarvelUniverse') {  // Change to the directory where the pom.xml is located
                    sh 'mvn clean package'
                }
            }
        }

        stage('Run Unit Tests with JUnit') {
            steps {
                dir('MarvelUniverse') {  // Change to the directory where the pom.xml is located
                    sh 'mvn test'
                }
            }
        }

        stage('Code Coverage with JaCoCo') {
            steps {
                dir('MarvelUniverse') {  // Change to the directory where the pom.xml is located
                    sh 'mvn jacoco:prepare-agent test jacoco:report'
                }
            }
        }

        stage('Archive Test Results & Coverage Report') {
            steps {
                junit '**/target/surefire-reports/*.xml'  // Archive JUnit test results
                archiveArtifacts artifacts: 'MarvelUniverse/target/site/jacoco/*.html', fingerprint: true  // Archive JaCoCo reports
                archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true  // Archive packaged .jar files
            }
        }

        // Dockerizing Stage (running on Slave-2)
        stage('Dockerize and Build Image') {
            agent { label 'slave-2' }  // Run this stage on Slave-2

            steps {
                script {
                    // Ensure Docker is installed on Slave-2
                    sh 'docker --version'  // This will ensure Docker is installed on Slave-2

                    // Build Docker image
                    sh 'docker build -t marvel-universe-image ./MarvelUniverse'

                    // Optionally, you can push the image to Docker Hub or any repository:
                    sh 'docker tag marvel-universe-image yourusername/marvel-universe-image'
                    sh 'docker push yourusername/marvel-universe-image'
                }
            }
        }
    }

    post {
        success {
            echo 'Build and tests completed successfully!'
        }
        failure {
            echo 'Build or tests failed. Check logs for details.'
        }
    }
}
